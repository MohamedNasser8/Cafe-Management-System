{"ast":null,"code":"/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Directive, ElementRef, Inject, PLATFORM_ID, Injectable, Input, NgModule, IterableDiffers, KeyValueDiffers, Optional, Renderer2, Self, SecurityContext, ɵɵdefineInjectable } from '@angular/core';\nimport { isPlatformServer, NgClass, NgStyle } from '@angular/common';\nimport { MediaMarshaller, BaseDirective2, SERVER_TOKEN, StyleBuilder, StyleUtils, LAYOUT_CONFIG, CoreModule } from '@angular/flex-layout/core';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { takeUntil } from 'rxjs/operators';\nimport { DomSanitizer } from '@angular/platform-browser';\n\n/**\n * @fileoverview added by tsickle\n * Generated from: extended/img-src/img-src.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nlet ImgSrcStyleBuilder = /*#__PURE__*/(() => {\n  class ImgSrcStyleBuilder extends StyleBuilder {\n    /**\n     * @param {?} url\n     * @return {?}\n     */\n    buildStyles(url) {\n      return {\n        'content': url ? `url(${url})` : ''\n      };\n    }\n  }\n  /** @nocollapse */ImgSrcStyleBuilder.ɵprov = ɵɵdefineInjectable({\n    factory: function ImgSrcStyleBuilder_Factory() {\n      return new ImgSrcStyleBuilder();\n    },\n    token: ImgSrcStyleBuilder,\n    providedIn: \"root\"\n  });\n  return ImgSrcStyleBuilder;\n})();\nclass ImgSrcDirective extends BaseDirective2 {\n  /**\n   * @param {?} elementRef\n   * @param {?} styleBuilder\n   * @param {?} styler\n   * @param {?} marshal\n   * @param {?} platformId\n   * @param {?} serverModuleLoaded\n   */\n  constructor(elementRef, styleBuilder, styler, marshal, platformId, serverModuleLoaded) {\n    super(elementRef, styleBuilder, styler, marshal);\n    this.platformId = platformId;\n    this.serverModuleLoaded = serverModuleLoaded;\n    this.DIRECTIVE_KEY = 'img-src';\n    this.defaultSrc = '';\n    this.styleCache = imgSrcCache;\n    this.init();\n    this.setValue(this.nativeElement.getAttribute('src') || '', '');\n    if (isPlatformServer(this.platformId) && this.serverModuleLoaded) {\n      this.nativeElement.setAttribute('src', '');\n    }\n  }\n  /**\n   * @param {?} val\n   * @return {?}\n   */\n  set src(val) {\n    this.defaultSrc = val;\n    this.setValue(this.defaultSrc, '');\n  }\n  /**\n   * Use the [responsively] activated input value to update\n   * the host img src attribute or assign a default `img.src=''`\n   * if the src has not been defined.\n   *\n   * Do nothing to standard `<img src=\"\">` usages, only when responsive\n   * keys are present do we actually call `setAttribute()`\n   * @protected\n   * @param {?=} value\n   * @return {?}\n   */\n  updateWithValue(value) {\n    /** @type {?} */\n    const url = value || this.defaultSrc;\n    if (isPlatformServer(this.platformId) && this.serverModuleLoaded) {\n      this.addStyles(url);\n    } else {\n      this.nativeElement.setAttribute('src', url);\n    }\n  }\n}\n\n/** @nocollapse */\n\n/** @type {?} */\nconst imgSrcCache = /*#__PURE__*/new Map();\n/** @type {?} */\nconst inputs = ['src.xs', 'src.sm', 'src.md', 'src.lg', 'src.xl', 'src.lt-sm', 'src.lt-md', 'src.lt-lg', 'src.lt-xl', 'src.gt-xs', 'src.gt-sm', 'src.gt-md', 'src.gt-lg'];\n/** @type {?} */\nconst selector = `\n  img[src.xs],    img[src.sm],    img[src.md],    img[src.lg],   img[src.xl],\n  img[src.lt-sm], img[src.lt-md], img[src.lt-lg], img[src.lt-xl],\n  img[src.gt-xs], img[src.gt-sm], img[src.gt-md], img[src.gt-lg]\n`;\n/**\n * This directive provides a responsive API for the HTML <img> 'src' attribute\n * and will update the img.src property upon each responsive activation.\n *\n * e.g.\n *      <img src=\"defaultScene.jpg\" src.xs=\"mobileScene.jpg\"></img>\n *\n * @see https://css-tricks.com/responsive-images-youre-just-changing-resolutions-use-src/\n */\nclass DefaultImgSrcDirective extends ImgSrcDirective {\n  constructor() {\n    super(...arguments);\n    this.inputs = inputs;\n  }\n}\n/**\n * @fileoverview added by tsickle\n * Generated from: extended/class/class.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass ClassDirective extends BaseDirective2 {\n  /**\n   * @param {?} elementRef\n   * @param {?} styler\n   * @param {?} marshal\n   * @param {?} iterableDiffers\n   * @param {?} keyValueDiffers\n   * @param {?} renderer2\n   * @param {?} ngClassInstance\n   */\n  constructor(elementRef, styler, marshal, iterableDiffers, keyValueDiffers, renderer2, ngClassInstance) {\n    super(elementRef, /** @type {?} */null, styler, marshal);\n    this.ngClassInstance = ngClassInstance;\n    this.DIRECTIVE_KEY = 'ngClass';\n    if (!this.ngClassInstance) {\n      // Create an instance NgClass Directive instance only if `ngClass=\"\"` has NOT been defined on\n      // the same host element; since the responsive variations may be defined...\n      this.ngClassInstance = new NgClass(iterableDiffers, keyValueDiffers, elementRef, renderer2);\n    }\n    this.init();\n    this.setValue('', '');\n  }\n  /**\n   * Capture class assignments so we cache the default classes\n   * which are merged with activated styles and used as fallbacks.\n   * @param {?} val\n   * @return {?}\n   */\n  set klass(val) {\n    this.ngClassInstance.klass = val;\n    this.setValue(val, '');\n  }\n  /**\n   * @protected\n   * @param {?} value\n   * @return {?}\n   */\n  updateWithValue(value) {\n    this.ngClassInstance.ngClass = value;\n    this.ngClassInstance.ngDoCheck();\n  }\n  // ******************************************************************\n  // Lifecycle Hooks\n  // ******************************************************************\n  /**\n   * For ChangeDetectionStrategy.onPush and ngOnChanges() updates\n   * @return {?}\n   */\n  ngDoCheck() {\n    this.ngClassInstance.ngDoCheck();\n  }\n}\n\n/** @nocollapse */\n\n/** @type {?} */\nconst inputs$1 = ['ngClass', 'ngClass.xs', 'ngClass.sm', 'ngClass.md', 'ngClass.lg', 'ngClass.xl', 'ngClass.lt-sm', 'ngClass.lt-md', 'ngClass.lt-lg', 'ngClass.lt-xl', 'ngClass.gt-xs', 'ngClass.gt-sm', 'ngClass.gt-md', 'ngClass.gt-lg'];\n/** @type {?} */\nconst selector$1 = `\n  [ngClass], [ngClass.xs], [ngClass.sm], [ngClass.md], [ngClass.lg], [ngClass.xl],\n  [ngClass.lt-sm], [ngClass.lt-md], [ngClass.lt-lg], [ngClass.lt-xl],\n  [ngClass.gt-xs], [ngClass.gt-sm], [ngClass.gt-md], [ngClass.gt-lg]\n`;\n/**\n * Directive to add responsive support for ngClass.\n * This maintains the core functionality of 'ngClass' and adds responsive API\n * Note: this class is a no-op when rendered on the server\n */\nclass DefaultClassDirective extends ClassDirective {\n  constructor() {\n    super(...arguments);\n    this.inputs = inputs$1;\n  }\n}\n/**\n * @fileoverview added by tsickle\n * Generated from: extended/show-hide/show-hide.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nlet ShowHideStyleBuilder = /*#__PURE__*/(() => {\n  class ShowHideStyleBuilder extends StyleBuilder {\n    /**\n     * @param {?} show\n     * @param {?} parent\n     * @return {?}\n     */\n    buildStyles(show, parent) {\n      /** @type {?} */\n      const shouldShow = show === 'true';\n      return {\n        'display': shouldShow ? parent.display || (parent.isServer ? 'initial' : '') : 'none'\n      };\n    }\n  }\n  /** @nocollapse */ShowHideStyleBuilder.ɵprov = ɵɵdefineInjectable({\n    factory: function ShowHideStyleBuilder_Factory() {\n      return new ShowHideStyleBuilder();\n    },\n    token: ShowHideStyleBuilder,\n    providedIn: \"root\"\n  });\n  return ShowHideStyleBuilder;\n})();\nclass ShowHideDirective extends BaseDirective2 {\n  /**\n   * @param {?} elementRef\n   * @param {?} styleBuilder\n   * @param {?} styler\n   * @param {?} marshal\n   * @param {?} layoutConfig\n   * @param {?} platformId\n   * @param {?} serverModuleLoaded\n   */\n  constructor(elementRef, styleBuilder, styler, marshal, layoutConfig, platformId, serverModuleLoaded) {\n    super(elementRef, styleBuilder, styler, marshal);\n    this.layoutConfig = layoutConfig;\n    this.platformId = platformId;\n    this.serverModuleLoaded = serverModuleLoaded;\n    this.DIRECTIVE_KEY = 'show-hide';\n    /**\n     * Original DOM Element CSS display style\n     */\n    this.display = '';\n    this.hasLayout = false;\n    this.hasFlexChild = false;\n  }\n  // *********************************************\n  // Lifecycle Methods\n  // *********************************************\n  /**\n   * @return {?}\n   */\n  ngAfterViewInit() {\n    this.trackExtraTriggers();\n    /** @type {?} */\n    const children = Array.from(this.nativeElement.children);\n    for (let i = 0; i < children.length; i++) {\n      if (this.marshal.hasValue( /** @type {?} */children[i], 'flex')) {\n        this.hasFlexChild = true;\n        break;\n      }\n    }\n    if (DISPLAY_MAP.has(this.nativeElement)) {\n      this.display = /** @type {?} */DISPLAY_MAP.get(this.nativeElement);\n    } else {\n      this.display = this.getDisplayStyle();\n      DISPLAY_MAP.set(this.nativeElement, this.display);\n    }\n    this.init();\n    // set the default to show unless explicitly overridden\n    /** @type {?} */\n    const defaultValue = this.marshal.getValue(this.nativeElement, this.DIRECTIVE_KEY, '');\n    if (defaultValue === undefined || defaultValue === '') {\n      this.setValue(true, '');\n    } else {\n      this.triggerUpdate();\n    }\n  }\n  /**\n   * On changes to any \\@Input properties...\n   * Default to use the non-responsive Input value ('fxShow')\n   * Then conditionally override with the mq-activated Input's current value\n   * @param {?} changes\n   * @return {?}\n   */\n  ngOnChanges(changes) {\n    Object.keys(changes).forEach(\n    /**\n    * @param {?} key\n    * @return {?}\n    */\n    key => {\n      if (this.inputs.indexOf(key) !== -1) {\n        /** @type {?} */\n        const inputKey = key.split('.');\n        /** @type {?} */\n        const bp = inputKey.slice(1).join('.');\n        /** @type {?} */\n        const inputValue = changes[key].currentValue;\n        /** @type {?} */\n        let shouldShow = inputValue !== '' ? inputValue !== 0 ? coerceBooleanProperty(inputValue) : false : true;\n        if (inputKey[0] === 'fxHide') {\n          shouldShow = !shouldShow;\n        }\n        this.setValue(shouldShow, bp);\n      }\n    });\n  }\n  // *********************************************\n  // Protected methods\n  // *********************************************\n  /**\n   *  Watch for these extra triggers to update fxShow, fxHide stylings\n   * @protected\n   * @return {?}\n   */\n  trackExtraTriggers() {\n    this.hasLayout = this.marshal.hasValue(this.nativeElement, 'layout');\n    ['layout', 'layout-align'].forEach(\n    /**\n    * @param {?} key\n    * @return {?}\n    */\n    key => {\n      this.marshal.trackValue(this.nativeElement, key).pipe(takeUntil(this.destroySubject)).subscribe(this.triggerUpdate.bind(this));\n    });\n  }\n  /**\n   * Override accessor to the current HTMLElement's `display` style\n   * Note: Show/Hide will not change the display to 'flex' but will set it to 'block'\n   * unless it was already explicitly specified inline or in a CSS stylesheet.\n   * @protected\n   * @return {?}\n   */\n  getDisplayStyle() {\n    return this.hasLayout || this.hasFlexChild && this.layoutConfig.addFlexToParent ? 'flex' : this.styler.lookupStyle(this.nativeElement, 'display', true);\n  }\n  /**\n   * Validate the visibility value and then update the host's inline display style\n   * @protected\n   * @param {?=} value\n   * @return {?}\n   */\n  updateWithValue(value = true) {\n    if (value === '') {\n      return;\n    }\n    /** @type {?} */\n    const isServer = isPlatformServer(this.platformId);\n    this.addStyles(value ? 'true' : 'false', {\n      display: this.display,\n      isServer\n    });\n    if (isServer && this.serverModuleLoaded) {\n      this.nativeElement.style.setProperty('display', '');\n    }\n    this.marshal.triggerUpdate( /** @type {?} */this.parentElement, 'layout-gap');\n  }\n}\n\n/** @nocollapse */\n\n/** @type {?} */\nconst DISPLAY_MAP = /*#__PURE__*/new WeakMap();\n/** @type {?} */\nconst inputs$2 = ['fxShow', 'fxShow.print', 'fxShow.xs', 'fxShow.sm', 'fxShow.md', 'fxShow.lg', 'fxShow.xl', 'fxShow.lt-sm', 'fxShow.lt-md', 'fxShow.lt-lg', 'fxShow.lt-xl', 'fxShow.gt-xs', 'fxShow.gt-sm', 'fxShow.gt-md', 'fxShow.gt-lg', 'fxHide', 'fxHide.print', 'fxHide.xs', 'fxHide.sm', 'fxHide.md', 'fxHide.lg', 'fxHide.xl', 'fxHide.lt-sm', 'fxHide.lt-md', 'fxHide.lt-lg', 'fxHide.lt-xl', 'fxHide.gt-xs', 'fxHide.gt-sm', 'fxHide.gt-md', 'fxHide.gt-lg'];\n/** @type {?} */\nconst selector$2 = `\n  [fxShow], [fxShow.print],\n  [fxShow.xs], [fxShow.sm], [fxShow.md], [fxShow.lg], [fxShow.xl],\n  [fxShow.lt-sm], [fxShow.lt-md], [fxShow.lt-lg], [fxShow.lt-xl],\n  [fxShow.gt-xs], [fxShow.gt-sm], [fxShow.gt-md], [fxShow.gt-lg],\n  [fxHide], [fxHide.print],\n  [fxHide.xs], [fxHide.sm], [fxHide.md], [fxHide.lg], [fxHide.xl],\n  [fxHide.lt-sm], [fxHide.lt-md], [fxHide.lt-lg], [fxHide.lt-xl],\n  [fxHide.gt-xs], [fxHide.gt-sm], [fxHide.gt-md], [fxHide.gt-lg]\n`;\n/**\n * 'show' Layout API directive\n */\nclass DefaultShowHideDirective extends ShowHideDirective {\n  constructor() {\n    super(...arguments);\n    this.inputs = inputs$2;\n  }\n}\n/**\n * @fileoverview added by tsickle\n * Generated from: extended/style/style-transforms.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * NgStyle allowed inputs\n */\nclass NgStyleKeyValue {\n  /**\n   * @param {?} key\n   * @param {?} value\n   * @param {?=} noQuotes\n   */\n  constructor(key, value, noQuotes = true) {\n    this.key = key;\n    this.value = value;\n    this.key = noQuotes ? key.replace(/['\"]/g, '').trim() : key.trim();\n    this.value = noQuotes ? value.replace(/['\"]/g, '').trim() : value.trim();\n    this.value = this.value.replace(/;/, '');\n  }\n}\n/**\n * @param {?} target\n * @return {?}\n */\nfunction getType(target) {\n  /** @type {?} */\n  let what = typeof target;\n  if (what === 'object') {\n    return target.constructor === Array ? 'array' : target.constructor === Set ? 'set' : 'object';\n  }\n  return what;\n}\n/**\n * Split string of key:value pairs into Array of k-v pairs\n * e.g.  'key:value; key:value; key:value;' -> ['key:value',...]\n * @param {?} source\n * @param {?=} delimiter\n * @return {?}\n */\nfunction buildRawList(source, delimiter = ';') {\n  return String(source).trim().split(delimiter).map(\n  /**\n  * @param {?} val\n  * @return {?}\n  */\n  val => val.trim()).filter(\n  /**\n  * @param {?} val\n  * @return {?}\n  */\n  val => val !== '');\n}\n/**\n * Convert array of key:value strings to a iterable map object\n * @param {?} styles\n * @param {?=} sanitize\n * @return {?}\n */\nfunction buildMapFromList(styles, sanitize) {\n  /** @type {?} */\n  const sanitizeValue =\n  /**\n  * @param {?} it\n  * @return {?}\n  */\n  it => {\n    if (sanitize) {\n      it.value = sanitize(it.value);\n    }\n    return it;\n  };\n  return styles.map(stringToKeyValue).filter(\n  /**\n  * @param {?} entry\n  * @return {?}\n  */\n  entry => !!entry).map(sanitizeValue).reduce(keyValuesToMap, /** @type {?} */{});\n}\n/**\n * Convert Set<string> or raw Object to an iterable NgStyleMap\n * @param {?} source\n * @param {?=} sanitize\n * @return {?}\n */\nfunction buildMapFromSet(source, sanitize) {\n  /** @type {?} */\n  let list = [];\n  if (getType(source) === 'set') {\n    /** @type {?} */source.forEach(\n    /**\n    * @param {?} entry\n    * @return {?}\n    */\n    entry => list.push(entry));\n  } else {\n    Object.keys(source).forEach(\n    /**\n    * @param {?} key\n    * @return {?}\n    */\n    key => {\n      list.push(`${key}:${/** @type {?} */source[key]}`);\n    });\n  }\n  return buildMapFromList(list, sanitize);\n}\n/**\n * Convert 'key:value' -> [key, value]\n * @param {?} it\n * @return {?}\n */\nfunction stringToKeyValue(it) {\n  const [key, ...vals] = it.split(':');\n  return new NgStyleKeyValue(key, vals.join(':'));\n}\n/**\n * Convert [ [key,value] ] -> { key : value }\n * @param {?} map\n * @param {?} entry\n * @return {?}\n */\nfunction keyValuesToMap(map, entry) {\n  if (!!entry.key) {\n    map[entry.key] = entry.value;\n  }\n  return map;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: extended/style/style.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass StyleDirective extends BaseDirective2 {\n  /**\n   * @param {?} elementRef\n   * @param {?} styler\n   * @param {?} marshal\n   * @param {?} sanitizer\n   * @param {?} differs\n   * @param {?} renderer2\n   * @param {?} ngStyleInstance\n   * @param {?} serverLoaded\n   * @param {?} platformId\n   */\n  constructor(elementRef, styler, marshal, sanitizer, differs, renderer2, ngStyleInstance, serverLoaded, platformId) {\n    super(elementRef, /** @type {?} */null, styler, marshal);\n    this.sanitizer = sanitizer;\n    this.ngStyleInstance = ngStyleInstance;\n    this.DIRECTIVE_KEY = 'ngStyle';\n    if (!this.ngStyleInstance) {\n      // Create an instance NgStyle Directive instance only if `ngStyle=\"\"` has NOT been\n      // defined on the same host element; since the responsive variations may be defined...\n      this.ngStyleInstance = new NgStyle(elementRef, differs, renderer2);\n    }\n    this.init();\n    /** @type {?} */\n    const styles = this.nativeElement.getAttribute('style') || '';\n    this.fallbackStyles = this.buildStyleMap(styles);\n    this.isServer = serverLoaded && isPlatformServer(platformId);\n  }\n  /**\n   * Add generated styles\n   * @protected\n   * @param {?} value\n   * @return {?}\n   */\n  updateWithValue(value) {\n    /** @type {?} */\n    const styles = this.buildStyleMap(value);\n    this.ngStyleInstance.ngStyle = Object.assign(Object.assign({}, this.fallbackStyles), styles);\n    if (this.isServer) {\n      this.applyStyleToElement(styles);\n    }\n    this.ngStyleInstance.ngDoCheck();\n  }\n  /**\n   * Remove generated styles\n   * @protected\n   * @return {?}\n   */\n  clearStyles() {\n    this.ngStyleInstance.ngStyle = this.fallbackStyles;\n    this.ngStyleInstance.ngDoCheck();\n  }\n  /**\n   * Convert raw strings to ngStyleMap; which is required by ngStyle\n   * NOTE: Raw string key-value pairs MUST be delimited by `;`\n   *       Comma-delimiters are not supported due to complexities of\n   *       possible style values such as `rgba(x,x,x,x)` and others\n   * @protected\n   * @param {?} styles\n   * @return {?}\n   */\n  buildStyleMap(styles) {\n    // Always safe-guard (aka sanitize) style property values\n    /** @type {?} */\n    const sanitizer =\n    /**\n    * @param {?} val\n    * @return {?}\n    */\n    val => this.sanitizer.sanitize(SecurityContext.STYLE, val) || '';\n    if (styles) {\n      switch (getType(styles)) {\n        case 'string':\n          return buildMapFromList$1(buildRawList(styles), sanitizer);\n        case 'array':\n          return buildMapFromList$1( /** @type {?} */styles, sanitizer);\n        case 'set':\n          return buildMapFromSet(styles, sanitizer);\n        default:\n          return buildMapFromSet(styles, sanitizer);\n      }\n    }\n    return {};\n  }\n  // ******************************************************************\n  // Lifecycle Hooks\n  // ******************************************************************\n  /**\n   * For ChangeDetectionStrategy.onPush and ngOnChanges() updates\n   * @return {?}\n   */\n  ngDoCheck() {\n    this.ngStyleInstance.ngDoCheck();\n  }\n}\n\n/** @nocollapse */\n\n/** @type {?} */\nconst inputs$3 = ['ngStyle', 'ngStyle.xs', 'ngStyle.sm', 'ngStyle.md', 'ngStyle.lg', 'ngStyle.xl', 'ngStyle.lt-sm', 'ngStyle.lt-md', 'ngStyle.lt-lg', 'ngStyle.lt-xl', 'ngStyle.gt-xs', 'ngStyle.gt-sm', 'ngStyle.gt-md', 'ngStyle.gt-lg'];\n/** @type {?} */\nconst selector$3 = `\n  [ngStyle],\n  [ngStyle.xs], [ngStyle.sm], [ngStyle.md], [ngStyle.lg], [ngStyle.xl],\n  [ngStyle.lt-sm], [ngStyle.lt-md], [ngStyle.lt-lg], [ngStyle.lt-xl],\n  [ngStyle.gt-xs], [ngStyle.gt-sm], [ngStyle.gt-md], [ngStyle.gt-lg]\n`;\n/**\n * Directive to add responsive support for ngStyle.\n *\n */\nclass DefaultStyleDirective extends StyleDirective {\n  constructor() {\n    super(...arguments);\n    this.inputs = inputs$3;\n  }\n}\n/**\n * Build a styles map from a list of styles, while sanitizing bad values first\n * @param {?} styles\n * @param {?=} sanitize\n * @return {?}\n */\nfunction buildMapFromList$1(styles, sanitize) {\n  /** @type {?} */\n  const sanitizeValue =\n  /**\n  * @param {?} it\n  * @return {?}\n  */\n  it => {\n    if (sanitize) {\n      it.value = sanitize(it.value);\n    }\n    return it;\n  };\n  return styles.map(stringToKeyValue).filter(\n  /**\n  * @param {?} entry\n  * @return {?}\n  */\n  entry => !!entry).map(sanitizeValue).reduce(keyValuesToMap, /** @type {?} */{});\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: extended/module.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst ALL_DIRECTIVES = [DefaultShowHideDirective, DefaultClassDirective, DefaultStyleDirective, DefaultImgSrcDirective];\n/**\n * *****************************************************************\n * Define module for the Extended API\n * *****************************************************************\n */\nclass ExtendedModule {}\n/**\n * @fileoverview added by tsickle\n * Generated from: extended/public-api.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @fileoverview added by tsickle\n * Generated from: extended/index.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nexport { ExtendedModule, ClassDirective, DefaultClassDirective, ImgSrcStyleBuilder, ImgSrcDirective, DefaultImgSrcDirective, ShowHideStyleBuilder, ShowHideDirective, DefaultShowHideDirective, StyleDirective, DefaultStyleDirective };\n//# sourceMappingURL=extended.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}