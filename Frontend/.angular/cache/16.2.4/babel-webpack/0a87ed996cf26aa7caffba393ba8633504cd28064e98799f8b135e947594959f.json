{"ast":null,"code":"import { AccordionDirective } from './accordion.directive';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./accordion.directive\";\nexport let AccordionLinkDirective = /*#__PURE__*/(() => {\n  class AccordionLinkDirective {\n    get selected() {\n      return this._selected;\n    }\n    set selected(value) {\n      this._selected = value;\n      if (value) {\n        this.nav.closeOtherLinks(this);\n      }\n    }\n    constructor(nav) {\n      this._selected = false;\n      this.nav = nav;\n    }\n    ngOnInit() {\n      this.nav.addLink(this);\n    }\n    ngOnDestroy() {\n      this.nav.removeGroup(this);\n    }\n    toggle() {\n      this.selected = !this.selected;\n    }\n    static #_ = this.ɵfac = function AccordionLinkDirective_Factory(t) {\n      return new (t || AccordionLinkDirective)(i0.ɵɵdirectiveInject(AccordionDirective));\n    };\n    static #_2 = this.ɵdir = /*@__PURE__*/i0.ɵɵdefineDirective({\n      type: AccordionLinkDirective,\n      selectors: [[\"\", \"appAccordionLink\", \"\"]],\n      hostVars: 2,\n      hostBindings: function AccordionLinkDirective_HostBindings(rf, ctx) {\n        if (rf & 2) {\n          i0.ɵɵclassProp(\"selected\", ctx.selected);\n        }\n      },\n      inputs: {\n        group: \"group\",\n        selected: \"selected\"\n      }\n    });\n  }\n  return AccordionLinkDirective;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}