{"ast":null,"code":"import { FormGroup, Validators } from '@angular/forms';\nimport { GlobalConstants } from '../shared/global-constants';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"../services/user.service\";\nimport * as i3 from \"@angular/router\";\nimport * as i4 from \"@angular/material/dialog\";\nimport * as i5 from \"ngx-ui-loader\";\nimport * as i6 from \"../services/snackbar.service\";\nimport * as i7 from \"@angular/common\";\nimport * as i8 from \"@angular/material/button\";\nimport * as i9 from \"@angular/material/form-field\";\nimport * as i10 from \"@angular/material/icon\";\nimport * as i11 from \"@angular/material/input\";\nimport * as i12 from \"@angular/material/toolbar\";\nimport * as i13 from \"@angular/flex-layout/flex\";\nfunction LoginComponent_mat_error_15_span_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\");\n    i0.ɵɵtext(1, \"This field is mandatory.\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction LoginComponent_mat_error_15_span_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\");\n    i0.ɵɵtext(1, \"This field is invalid.\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction LoginComponent_mat_error_15_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\");\n    i0.ɵɵtemplate(1, LoginComponent_mat_error_15_span_1_Template, 2, 0, \"span\", 9);\n    i0.ɵɵtemplate(2, LoginComponent_mat_error_15_span_2_Template, 2, 0, \"span\", 9);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.loginForm.controls.email.errors.required);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.loginForm.controls.email.errors.pattern);\n  }\n}\nfunction LoginComponent_mat_error_22_span_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\");\n    i0.ɵɵtext(1, \"This field is mandatory.\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction LoginComponent_mat_error_22_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\");\n    i0.ɵɵtemplate(1, LoginComponent_mat_error_22_span_1_Template, 2, 0, \"span\", 9);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r1.loginForm.controls.password.errors.required);\n  }\n}\nexport let LoginComponent = /*#__PURE__*/(() => {\n  class LoginComponent {\n    constructor(formBuilder, userService, router, dialogRef, ngxService, snackBar) {\n      this.formBuilder = formBuilder;\n      this.userService = userService;\n      this.router = router;\n      this.dialogRef = dialogRef;\n      this.ngxService = ngxService;\n      this.snackBar = snackBar;\n      this.hide = true;\n      this.loginForm = FormGroup;\n    }\n    ngOnInit() {\n      this.loginForm = this.formBuilder.group({\n        email: [null, [Validators.required, Validators.pattern(GlobalConstants.emailRegex)]],\n        password: [null, [Validators.required]]\n      });\n    }\n    handleSubmit() {\n      this.ngxService.start();\n      var data = this.loginForm.value;\n      this.userService.login(data).subscribe(res => {\n        this.ngxService.stop();\n        this.dialogRef.close();\n        localStorage.setItem('token', res.token);\n        this.router.navigate(['/cafe/dashboard']);\n      }, error => {\n        if (error.error?.message) this.responseMessage = error.error?.message;else this.responseMessage = GlobalConstants.error;\n        this.snackBar.openSnackBar(this.responseMessage, GlobalConstants.error);\n      });\n    }\n    static #_ = this.ɵfac = function LoginComponent_Factory(t) {\n      return new (t || LoginComponent)(i0.ɵɵdirectiveInject(i1.FormBuilder), i0.ɵɵdirectiveInject(i2.UserService), i0.ɵɵdirectiveInject(i3.Router), i0.ɵɵdirectiveInject(i4.MatDialogRef), i0.ɵɵdirectiveInject(i5.NgxUiLoaderService), i0.ɵɵdirectiveInject(i6.SnackbarService));\n    };\n    static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: LoginComponent,\n      selectors: [[\"app-login\"]],\n      decls: 32,\n      vars: 8,\n      consts: [[\"color\", \"primary\"], [\"fxLayout\", \"row\"], [1, \"spacer\"], [\"mat-icon-button\", \"\", \"mat-dialog-close\", \"\", 1, \"mat-dialog-close\"], [1, \"mat-typography\"], [3, \"formGroup\"], [\"fxFlex\", \"\", \"fxLayout\", \"column\"], [\"fxFlex\", \"\"], [\"matInput\", \"\", \"formControlName\", \"email\", \"required\", \"\"], [4, \"ngIf\"], [\"matInput\", \"\", \"formControlName\", \"password\", \"type\", \"password\", \"required\", \"\", 3, \"type\"], [\"mat-icon-button\", \"\", \"matSuffix\", \"\", 3, \"click\"], [3, \"innerHTML\"], [\"align\", \"end\"], [\"mat-raised-button\", \"\", \"color\", \"primary\", \"type\", \"submit\", 3, \"disabled\", \"click\"], [\"mat-raised-button\", \"\", \"color\", \"warn\", \"mat-dialog-close\", \"\"]],\n      template: function LoginComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵelementStart(0, \"mat-toolbar\", 0)(1, \"mat-toolbar-row\", 1)(2, \"span\");\n          i0.ɵɵtext(3, \"Login\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelement(4, \"span\", 2);\n          i0.ɵɵelementStart(5, \"button\", 3)(6, \"mat-icon\");\n          i0.ɵɵtext(7, \"close\");\n          i0.ɵɵelementEnd()()()();\n          i0.ɵɵelementStart(8, \"mat-dialog-content\", 4)(9, \"form\", 5)(10, \"div\", 6)(11, \"mat-form-field\", 7)(12, \"mat-label\");\n          i0.ɵɵtext(13, \"Email\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelement(14, \"input\", 8);\n          i0.ɵɵtemplate(15, LoginComponent_mat_error_15_Template, 3, 2, \"mat-error\", 9);\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(16, \"mat-form-field\", 7)(17, \"mat-label\");\n          i0.ɵɵtext(18, \"Password\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelement(19, \"input\", 10);\n          i0.ɵɵelementStart(20, \"button\", 11);\n          i0.ɵɵlistener(\"click\", function LoginComponent_Template_button_click_20_listener() {\n            return ctx.hide = !ctx.hide;\n          });\n          i0.ɵɵelement(21, \"mat-icon\", 12);\n          i0.ɵɵelementEnd();\n          i0.ɵɵtemplate(22, LoginComponent_mat_error_22_Template, 2, 1, \"mat-error\", 9);\n          i0.ɵɵelementEnd()()()();\n          i0.ɵɵelementStart(23, \"mat-dialog-actions\", 13)(24, \"button\", 14);\n          i0.ɵɵlistener(\"click\", function LoginComponent_Template_button_click_24_listener() {\n            return ctx.handleSubmit();\n          });\n          i0.ɵɵelementStart(25, \"mat-icon\");\n          i0.ɵɵtext(26, \"login\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵtext(27, \"Login \");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(28, \"button\", 15)(29, \"mat-icon\");\n          i0.ɵɵtext(30, \"cancel\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵtext(31, \" Close \");\n          i0.ɵɵelementEnd()();\n        }\n        if (rf & 2) {\n          i0.ɵɵadvance(9);\n          i0.ɵɵproperty(\"formGroup\", ctx.loginForm);\n          i0.ɵɵadvance(6);\n          i0.ɵɵproperty(\"ngIf\", ctx.loginForm.controls.email.touched && ctx.loginForm.controls.email.invalid);\n          i0.ɵɵadvance(4);\n          i0.ɵɵproperty(\"type\", ctx.hide ? \"password\" : \"text\");\n          i0.ɵɵadvance(1);\n          i0.ɵɵattribute(\"aria-label\", \"Hide password\")(\"aria-pressed\", ctx.hide);\n          i0.ɵɵadvance(1);\n          i0.ɵɵproperty(\"innerHTML\", ctx.hide ? \"visibility_off\" : \"visibility\", i0.ɵɵsanitizeHtml);\n          i0.ɵɵadvance(1);\n          i0.ɵɵproperty(\"ngIf\", ctx.loginForm.controls.password.touched && ctx.loginForm.controls.password.invalid);\n          i0.ɵɵadvance(2);\n          i0.ɵɵproperty(\"disabled\", !ctx.loginForm.valid);\n        }\n      },\n      dependencies: [i7.NgIf, i1.ɵNgNoValidate, i1.DefaultValueAccessor, i1.NgControlStatus, i1.NgControlStatusGroup, i1.RequiredValidator, i1.FormGroupDirective, i1.FormControlName, i8.MatButton, i8.MatIconButton, i4.MatDialogClose, i4.MatDialogContent, i4.MatDialogActions, i9.MatFormField, i9.MatLabel, i9.MatError, i9.MatSuffix, i10.MatIcon, i11.MatInput, i12.MatToolbar, i12.MatToolbarRow, i13.DefaultLayoutDirective, i13.DefaultFlexDirective],\n      styles: [\".mat-toolbar[_ngcontent-%COMP%]{width:auto;margin-bottom:20px}mat-form-field[_ngcontent-%COMP%]{padding:5px}mat-hint[_ngcontent-%COMP%]{color:red}input[type=password][_ngcontent-%COMP%]::-ms-reveal, input[type=password][_ngcontent-%COMP%]::-ms-clear{display:none}\"]\n    });\n  }\n  return LoginComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}