{"ast":null,"code":"import { NavigationEnd } from '@angular/router';\nimport { filter } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nexport let AccordionDirective = /*#__PURE__*/(() => {\n  class AccordionDirective {\n    closeOtherLinks(selectedLink) {\n      this.navlinks.forEach(link => {\n        if (link !== selectedLink) {\n          link.selected = false;\n        }\n      });\n    }\n    addLink(link) {\n      this.navlinks.push(link);\n    }\n    removeGroup(link) {\n      const index = this.navlinks.indexOf(link);\n      if (index !== -1) {\n        this.navlinks.splice(index, 1);\n      }\n    }\n    checkOpenLinks() {\n      this.navlinks.forEach(link => {\n        if (link.group) {\n          const routeUrl = this.router.url;\n          const currentUrl = routeUrl.split('/');\n          if (currentUrl.indexOf(link.group) > 0) {\n            link.selected = true;\n            this.closeOtherLinks(link);\n          }\n        }\n      });\n    }\n    ngAfterContentChecked() {\n      this.router.events.pipe(filter(event => event instanceof NavigationEnd)).subscribe(e => this.checkOpenLinks());\n    }\n    constructor(router) {\n      this.router = router;\n      this.navlinks = [];\n      setTimeout(() => this.checkOpenLinks());\n    }\n    static #_ = this.ɵfac = function AccordionDirective_Factory(t) {\n      return new (t || AccordionDirective)(i0.ɵɵdirectiveInject(i1.Router));\n    };\n    static #_2 = this.ɵdir = /*@__PURE__*/i0.ɵɵdefineDirective({\n      type: AccordionDirective,\n      selectors: [[\"\", \"appAccordion\", \"\"]]\n    });\n  }\n  return AccordionDirective;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}